<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="10436"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="0.0096%" y="693" width="0.0287%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2596%" y="703.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="0.0383%" y="693" width="0.0192%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.2883%" y="703.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="0.0575%" y="693" width="0.0192%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="2"/><text x="0.3075%" y="703.50"></text></g><g><title>__memcmp_avx2_movbe (63 samples, 0.60%)</title><rect x="0.0767%" y="693" width="0.6037%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="63"/><text x="0.3267%" y="703.50"></text></g><g><title>_int_free (31 samples, 0.30%)</title><rect x="0.6803%" y="693" width="0.2970%" height="15" fill="rgb(208,68,35)" fg:x="71" fg:w="31"/><text x="0.9303%" y="703.50"></text></g><g><title>_int_malloc (22 samples, 0.21%)</title><rect x="0.9774%" y="693" width="0.2108%" height="15" fill="rgb(232,128,0)" fg:x="102" fg:w="22"/><text x="1.2274%" y="703.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (7 samples, 0.07%)</title><rect x="1.1882%" y="693" width="0.0671%" height="15" fill="rgb(207,160,47)" fg:x="124" fg:w="7"/><text x="1.4382%" y="703.50"></text></g><g><title>alloc::string::String::with_capacity (2 samples, 0.02%)</title><rect x="1.2361%" y="677" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="129" fg:w="2"/><text x="1.4861%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="1.2361%" y="661" width="0.0192%" height="15" fill="rgb(218,30,26)" fg:x="129" fg:w="2"/><text x="1.4861%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="1.2361%" y="645" width="0.0192%" height="15" fill="rgb(220,122,19)" fg:x="129" fg:w="2"/><text x="1.4861%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="1.2361%" y="629" width="0.0192%" height="15" fill="rgb(250,228,42)" fg:x="129" fg:w="2"/><text x="1.4861%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="1.2361%" y="613" width="0.0192%" height="15" fill="rgb(240,193,28)" fg:x="129" fg:w="2"/><text x="1.4861%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="1.2361%" y="597" width="0.0192%" height="15" fill="rgb(216,20,37)" fg:x="129" fg:w="2"/><text x="1.4861%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="1.2361%" y="581" width="0.0192%" height="15" fill="rgb(206,188,39)" fg:x="129" fg:w="2"/><text x="1.4861%" y="591.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="1.2361%" y="565" width="0.0192%" height="15" fill="rgb(217,207,13)" fg:x="129" fg:w="2"/><text x="1.4861%" y="575.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.02%)</title><rect x="1.2553%" y="693" width="0.0192%" height="15" fill="rgb(231,73,38)" fg:x="131" fg:w="2"/><text x="1.5053%" y="703.50"></text></g><g><title>[[heap]] (134 samples, 1.28%)</title><rect x="0.0000%" y="709" width="1.2840%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="134"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.25%)</title><rect x="1.2840%" y="693" width="0.2491%" height="15" fill="rgb(210,31,41)" fg:x="134" fg:w="26"/><text x="1.5340%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="1.5332%" y="693" width="0.0287%" height="15" fill="rgb(221,200,47)" fg:x="160" fg:w="3"/><text x="1.7832%" y="703.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="1.5619%" y="693" width="0.0287%" height="15" fill="rgb(226,26,5)" fg:x="163" fg:w="3"/><text x="1.8119%" y="703.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.04%)</title><rect x="1.5906%" y="693" width="0.0383%" height="15" fill="rgb(249,33,26)" fg:x="166" fg:w="4"/><text x="1.8406%" y="703.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.03%)</title><rect x="1.6577%" y="693" width="0.0287%" height="15" fill="rgb(235,183,28)" fg:x="173" fg:w="3"/><text x="1.9077%" y="703.50"></text></g><g><title>[[stack]] (72 samples, 0.69%)</title><rect x="1.2840%" y="709" width="0.6899%" height="15" fill="rgb(221,5,38)" fg:x="134" fg:w="72"/><text x="1.5340%" y="719.50"></text></g><g><title>day12::travel2 (30 samples, 0.29%)</title><rect x="1.6865%" y="693" width="0.2875%" height="15" fill="rgb(247,18,42)" fg:x="176" fg:w="30"/><text x="1.9365%" y="703.50"></text></g><g><title>[day12] (7 samples, 0.07%)</title><rect x="1.9739%" y="709" width="0.0671%" height="15" fill="rgb(241,131,45)" fg:x="206" fg:w="7"/><text x="2.2239%" y="719.50"></text></g><g><title>_int_free (7 samples, 0.07%)</title><rect x="1.9739%" y="693" width="0.0671%" height="15" fill="rgb(249,31,29)" fg:x="206" fg:w="7"/><text x="2.2239%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.16%)</title><rect x="2.0410%" y="693" width="0.1629%" height="15" fill="rgb(225,111,53)" fg:x="213" fg:w="17"/><text x="2.2910%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.06%)</title><rect x="2.1464%" y="677" width="0.0575%" height="15" fill="rgb(238,160,17)" fg:x="224" fg:w="6"/><text x="2.3964%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.06%)</title><rect x="2.1464%" y="661" width="0.0575%" height="15" fill="rgb(214,148,48)" fg:x="224" fg:w="6"/><text x="2.3964%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.06%)</title><rect x="2.1464%" y="645" width="0.0575%" height="15" fill="rgb(232,36,49)" fg:x="224" fg:w="6"/><text x="2.3964%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.06%)</title><rect x="2.1464%" y="629" width="0.0575%" height="15" fill="rgb(209,103,24)" fg:x="224" fg:w="6"/><text x="2.3964%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.06%)</title><rect x="2.1464%" y="613" width="0.0575%" height="15" fill="rgb(229,88,8)" fg:x="224" fg:w="6"/><text x="2.3964%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.06%)</title><rect x="2.1464%" y="597" width="0.0575%" height="15" fill="rgb(213,181,19)" fg:x="224" fg:w="6"/><text x="2.3964%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.11%)</title><rect x="2.2039%" y="693" width="0.1054%" height="15" fill="rgb(254,191,54)" fg:x="230" fg:w="11"/><text x="2.4539%" y="703.50"></text></g><g><title>__GI___libc_free (22 samples, 0.21%)</title><rect x="2.3093%" y="693" width="0.2108%" height="15" fill="rgb(241,83,37)" fg:x="241" fg:w="22"/><text x="2.5593%" y="703.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.25%)</title><rect x="2.5201%" y="693" width="0.2491%" height="15" fill="rgb(233,36,39)" fg:x="263" fg:w="26"/><text x="2.7701%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="2.7884%" y="693" width="0.0192%" height="15" fill="rgb(226,3,54)" fg:x="291" fg:w="2"/><text x="3.0384%" y="703.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="2.8076%" y="693" width="0.0192%" height="15" fill="rgb(245,192,40)" fg:x="293" fg:w="2"/><text x="3.0576%" y="703.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="2.8363%" y="693" width="0.0287%" height="15" fill="rgb(238,167,29)" fg:x="296" fg:w="3"/><text x="3.0863%" y="703.50"></text></g><g><title>_int_malloc (11 samples, 0.11%)</title><rect x="2.8651%" y="693" width="0.1054%" height="15" fill="rgb(232,182,51)" fg:x="299" fg:w="11"/><text x="3.1151%" y="703.50"></text></g><g><title>_int_realloc (5 samples, 0.05%)</title><rect x="2.9705%" y="693" width="0.0479%" height="15" fill="rgb(231,60,39)" fg:x="310" fg:w="5"/><text x="3.2205%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="3.0280%" y="693" width="0.0192%" height="15" fill="rgb(208,69,12)" fg:x="316" fg:w="2"/><text x="3.2780%" y="703.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (4 samples, 0.04%)</title><rect x="3.0471%" y="693" width="0.0383%" height="15" fill="rgb(235,93,37)" fg:x="318" fg:w="4"/><text x="3.2971%" y="703.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.02%)</title><rect x="3.0855%" y="693" width="0.0192%" height="15" fill="rgb(213,116,39)" fg:x="322" fg:w="2"/><text x="3.3355%" y="703.50"></text></g><g><title>day12::main (169 samples, 1.62%)</title><rect x="3.1142%" y="693" width="1.6194%" height="15" fill="rgb(222,207,29)" fg:x="325" fg:w="169"/><text x="3.3642%" y="703.50"></text></g><g><title>[unknown] (283 samples, 2.71%)</title><rect x="2.0410%" y="709" width="2.7118%" height="15" fill="rgb(206,96,30)" fg:x="213" fg:w="283"/><text x="2.2910%" y="719.50">[u..</text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="4.7336%" y="693" width="0.0192%" height="15" fill="rgb(218,138,4)" fg:x="494" fg:w="2"/><text x="4.9836%" y="703.50"></text></g><g><title>__GI___libc_free (6 samples, 0.06%)</title><rect x="40.9736%" y="469" width="0.0575%" height="15" fill="rgb(250,191,14)" fg:x="4276" fg:w="6"/><text x="41.2236%" y="479.50"></text></g><g><title>_int_free (5 samples, 0.05%)</title><rect x="40.9831%" y="453" width="0.0479%" height="15" fill="rgb(239,60,40)" fg:x="4277" fg:w="5"/><text x="41.2331%" y="463.50"></text></g><g><title>malloc_consolidate (3 samples, 0.03%)</title><rect x="41.0023%" y="437" width="0.0287%" height="15" fill="rgb(206,27,48)" fg:x="4279" fg:w="3"/><text x="41.2523%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (4,530 samples, 43.41%)</title><rect x="41.0310%" y="469" width="43.4074%" height="15" fill="rgb(225,35,8)" fg:x="4282" fg:w="4530"/><text x="41.2810%" y="479.50">__memcmp_avx2_movbe</text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="84.4385%" y="469" width="0.0192%" height="15" fill="rgb(250,213,24)" fg:x="8812" fg:w="2"/><text x="84.6885%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="84.4576%" y="453" width="0.0383%" height="15" fill="rgb(247,123,22)" fg:x="8814" fg:w="4"/><text x="84.7076%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="84.4960%" y="453" width="0.0287%" height="15" fill="rgb(231,138,38)" fg:x="8818" fg:w="3"/><text x="84.7460%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="84.4960%" y="437" width="0.0287%" height="15" fill="rgb(231,145,46)" fg:x="8818" fg:w="3"/><text x="84.7460%" y="447.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="84.4960%" y="421" width="0.0287%" height="15" fill="rgb(251,118,11)" fg:x="8818" fg:w="3"/><text x="84.7460%" y="431.50"></text></g><g><title>_int_realloc (3 samples, 0.03%)</title><rect x="84.4960%" y="405" width="0.0287%" height="15" fill="rgb(217,147,25)" fg:x="8818" fg:w="3"/><text x="84.7460%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="84.4960%" y="389" width="0.0287%" height="15" fill="rgb(247,81,37)" fg:x="8818" fg:w="3"/><text x="84.7460%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="84.5343%" y="437" width="0.0192%" height="15" fill="rgb(209,12,38)" fg:x="8822" fg:w="2"/><text x="84.7843%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="84.5343%" y="421" width="0.0192%" height="15" fill="rgb(227,1,9)" fg:x="8822" fg:w="2"/><text x="84.7843%" y="431.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="84.5343%" y="405" width="0.0192%" height="15" fill="rgb(248,47,43)" fg:x="8822" fg:w="2"/><text x="84.7843%" y="415.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="84.5343%" y="389" width="0.0192%" height="15" fill="rgb(221,10,30)" fg:x="8822" fg:w="2"/><text x="84.7843%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="84.5343%" y="373" width="0.0192%" height="15" fill="rgb(210,229,1)" fg:x="8822" fg:w="2"/><text x="84.7843%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.05%)</title><rect x="84.5535%" y="421" width="0.0479%" height="15" fill="rgb(222,148,37)" fg:x="8824" fg:w="5"/><text x="84.8035%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.05%)</title><rect x="84.5535%" y="405" width="0.0479%" height="15" fill="rgb(234,67,33)" fg:x="8824" fg:w="5"/><text x="84.8035%" y="415.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.05%)</title><rect x="84.5535%" y="389" width="0.0479%" height="15" fill="rgb(247,98,35)" fg:x="8824" fg:w="5"/><text x="84.8035%" y="399.50"></text></g><g><title>_int_realloc (5 samples, 0.05%)</title><rect x="84.5535%" y="373" width="0.0479%" height="15" fill="rgb(247,138,52)" fg:x="8824" fg:w="5"/><text x="84.8035%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="84.5535%" y="357" width="0.0479%" height="15" fill="rgb(213,79,30)" fg:x="8824" fg:w="5"/><text x="84.8035%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="84.6110%" y="341" width="0.0192%" height="15" fill="rgb(246,177,23)" fg:x="8830" fg:w="2"/><text x="84.8610%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.04%)</title><rect x="84.6110%" y="405" width="0.0383%" height="15" fill="rgb(230,62,27)" fg:x="8830" fg:w="4"/><text x="84.8610%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="84.6110%" y="389" width="0.0383%" height="15" fill="rgb(216,154,8)" fg:x="8830" fg:w="4"/><text x="84.8610%" y="399.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.04%)</title><rect x="84.6110%" y="373" width="0.0383%" height="15" fill="rgb(244,35,45)" fg:x="8830" fg:w="4"/><text x="84.8610%" y="383.50"></text></g><g><title>_int_realloc (4 samples, 0.04%)</title><rect x="84.6110%" y="357" width="0.0383%" height="15" fill="rgb(251,115,12)" fg:x="8830" fg:w="4"/><text x="84.8610%" y="367.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="84.6301%" y="341" width="0.0192%" height="15" fill="rgb(240,54,50)" fg:x="8832" fg:w="2"/><text x="84.8801%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="84.6589%" y="389" width="0.0192%" height="15" fill="rgb(233,84,52)" fg:x="8835" fg:w="2"/><text x="84.9089%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="84.6589%" y="373" width="0.0192%" height="15" fill="rgb(207,117,47)" fg:x="8835" fg:w="2"/><text x="84.9089%" y="383.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="84.6780%" y="389" width="0.0192%" height="15" fill="rgb(249,43,39)" fg:x="8837" fg:w="2"/><text x="84.9280%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="84.7164%" y="325" width="0.0383%" height="15" fill="rgb(209,38,44)" fg:x="8841" fg:w="4"/><text x="84.9664%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.10%)</title><rect x="84.7068%" y="389" width="0.0958%" height="15" fill="rgb(236,212,23)" fg:x="8840" fg:w="10"/><text x="84.9568%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.10%)</title><rect x="84.7068%" y="373" width="0.0958%" height="15" fill="rgb(242,79,21)" fg:x="8840" fg:w="10"/><text x="84.9568%" y="383.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.10%)</title><rect x="84.7068%" y="357" width="0.0958%" height="15" fill="rgb(211,96,35)" fg:x="8840" fg:w="10"/><text x="84.9568%" y="367.50"></text></g><g><title>_int_realloc (9 samples, 0.09%)</title><rect x="84.7164%" y="341" width="0.0862%" height="15" fill="rgb(253,215,40)" fg:x="8841" fg:w="9"/><text x="84.9664%" y="351.50"></text></g><g><title>_int_malloc (5 samples, 0.05%)</title><rect x="84.7547%" y="325" width="0.0479%" height="15" fill="rgb(211,81,21)" fg:x="8845" fg:w="5"/><text x="85.0047%" y="335.50"></text></g><g><title>malloc_consolidate (4 samples, 0.04%)</title><rect x="84.7643%" y="309" width="0.0383%" height="15" fill="rgb(208,190,38)" fg:x="8846" fg:w="4"/><text x="85.0143%" y="319.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="84.7834%" y="293" width="0.0192%" height="15" fill="rgb(235,213,38)" fg:x="8848" fg:w="2"/><text x="85.0334%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="84.8697%" y="357" width="0.0287%" height="15" fill="rgb(237,122,38)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="84.8697%" y="341" width="0.0287%" height="15" fill="rgb(244,218,35)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="84.8697%" y="325" width="0.0287%" height="15" fill="rgb(240,68,47)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="84.8697%" y="309" width="0.0287%" height="15" fill="rgb(210,16,53)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="84.8697%" y="293" width="0.0287%" height="15" fill="rgb(235,124,12)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="84.8697%" y="277" width="0.0287%" height="15" fill="rgb(224,169,11)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="84.8697%" y="261" width="0.0287%" height="15" fill="rgb(250,166,2)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="84.8697%" y="245" width="0.0287%" height="15" fill="rgb(242,216,29)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="84.8697%" y="229" width="0.0287%" height="15" fill="rgb(230,116,27)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="84.8697%" y="213" width="0.0287%" height="15" fill="rgb(228,99,48)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="223.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="84.8697%" y="197" width="0.0287%" height="15" fill="rgb(253,11,6)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="207.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="84.8697%" y="181" width="0.0287%" height="15" fill="rgb(247,143,39)" fg:x="8857" fg:w="3"/><text x="85.1197%" y="191.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="84.8793%" y="165" width="0.0192%" height="15" fill="rgb(236,97,10)" fg:x="8858" fg:w="2"/><text x="85.1293%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.08%)</title><rect x="84.8314%" y="373" width="0.0767%" height="15" fill="rgb(233,208,19)" fg:x="8853" fg:w="8"/><text x="85.0814%" y="383.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="84.9080%" y="373" width="0.0192%" height="15" fill="rgb(216,164,2)" fg:x="8861" fg:w="2"/><text x="85.1580%" y="383.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="84.9080%" y="357" width="0.0192%" height="15" fill="rgb(220,129,5)" fg:x="8861" fg:w="2"/><text x="85.1580%" y="367.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="84.9080%" y="341" width="0.0192%" height="15" fill="rgb(242,17,10)" fg:x="8861" fg:w="2"/><text x="85.1580%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.19%)</title><rect x="84.9368%" y="373" width="0.1916%" height="15" fill="rgb(242,107,0)" fg:x="8864" fg:w="20"/><text x="85.1868%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.19%)</title><rect x="84.9368%" y="357" width="0.1916%" height="15" fill="rgb(251,28,31)" fg:x="8864" fg:w="20"/><text x="85.1868%" y="367.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.18%)</title><rect x="84.9463%" y="341" width="0.1821%" height="15" fill="rgb(233,223,10)" fg:x="8865" fg:w="19"/><text x="85.1963%" y="351.50"></text></g><g><title>_int_realloc (18 samples, 0.17%)</title><rect x="84.9559%" y="325" width="0.1725%" height="15" fill="rgb(215,21,27)" fg:x="8866" fg:w="18"/><text x="85.2059%" y="335.50"></text></g><g><title>_int_malloc (15 samples, 0.14%)</title><rect x="84.9847%" y="309" width="0.1437%" height="15" fill="rgb(232,23,21)" fg:x="8869" fg:w="15"/><text x="85.2347%" y="319.50"></text></g><g><title>malloc_consolidate (9 samples, 0.09%)</title><rect x="85.0422%" y="293" width="0.0862%" height="15" fill="rgb(244,5,23)" fg:x="8875" fg:w="9"/><text x="85.2922%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="85.2146%" y="261" width="0.0192%" height="15" fill="rgb(226,81,46)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="85.2146%" y="245" width="0.0192%" height="15" fill="rgb(247,70,30)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="85.2146%" y="229" width="0.0192%" height="15" fill="rgb(212,68,19)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="85.2146%" y="213" width="0.0192%" height="15" fill="rgb(240,187,13)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="85.2146%" y="197" width="0.0192%" height="15" fill="rgb(223,113,26)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="85.2146%" y="181" width="0.0192%" height="15" fill="rgb(206,192,2)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="191.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="85.2146%" y="165" width="0.0192%" height="15" fill="rgb(241,108,4)" fg:x="8893" fg:w="2"/><text x="85.4646%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="85.2146%" y="341" width="0.0479%" height="15" fill="rgb(247,173,49)" fg:x="8893" fg:w="5"/><text x="85.4646%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="85.2146%" y="325" width="0.0479%" height="15" fill="rgb(224,114,35)" fg:x="8893" fg:w="5"/><text x="85.4646%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.05%)</title><rect x="85.2146%" y="309" width="0.0479%" height="15" fill="rgb(245,159,27)" fg:x="8893" fg:w="5"/><text x="85.4646%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.05%)</title><rect x="85.2146%" y="293" width="0.0479%" height="15" fill="rgb(245,172,44)" fg:x="8893" fg:w="5"/><text x="85.4646%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.05%)</title><rect x="85.2146%" y="277" width="0.0479%" height="15" fill="rgb(236,23,11)" fg:x="8893" fg:w="5"/><text x="85.4646%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="85.2338%" y="261" width="0.0287%" height="15" fill="rgb(205,117,38)" fg:x="8895" fg:w="3"/><text x="85.4838%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="85.2338%" y="245" width="0.0287%" height="15" fill="rgb(237,72,25)" fg:x="8895" fg:w="3"/><text x="85.4838%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="85.2338%" y="229" width="0.0287%" height="15" fill="rgb(244,70,9)" fg:x="8895" fg:w="3"/><text x="85.4838%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.08%)</title><rect x="85.2051%" y="357" width="0.0767%" height="15" fill="rgb(217,125,39)" fg:x="8892" fg:w="8"/><text x="85.4551%" y="367.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="85.2626%" y="341" width="0.0192%" height="15" fill="rgb(235,36,10)" fg:x="8898" fg:w="2"/><text x="85.5126%" y="351.50"></text></g><g><title>__GI___libc_free (6 samples, 0.06%)</title><rect x="85.2817%" y="357" width="0.0575%" height="15" fill="rgb(251,123,47)" fg:x="8900" fg:w="6"/><text x="85.5317%" y="367.50"></text></g><g><title>_int_free (5 samples, 0.05%)</title><rect x="85.2913%" y="341" width="0.0479%" height="15" fill="rgb(221,13,13)" fg:x="8901" fg:w="5"/><text x="85.5413%" y="351.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.03%)</title><rect x="85.3392%" y="357" width="0.0287%" height="15" fill="rgb(238,131,9)" fg:x="8906" fg:w="3"/><text x="85.5892%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="85.3680%" y="357" width="0.0192%" height="15" fill="rgb(211,50,8)" fg:x="8909" fg:w="2"/><text x="85.6180%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="85.4350%" y="293" width="0.0287%" height="15" fill="rgb(245,182,24)" fg:x="8916" fg:w="3"/><text x="85.6850%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.17%)</title><rect x="85.3871%" y="357" width="0.1725%" height="15" fill="rgb(242,14,37)" fg:x="8911" fg:w="18"/><text x="85.6371%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.16%)</title><rect x="85.3967%" y="341" width="0.1629%" height="15" fill="rgb(246,228,12)" fg:x="8912" fg:w="17"/><text x="85.6467%" y="351.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.14%)</title><rect x="85.4159%" y="325" width="0.1437%" height="15" fill="rgb(213,55,15)" fg:x="8914" fg:w="15"/><text x="85.6659%" y="335.50"></text></g><g><title>_int_realloc (14 samples, 0.13%)</title><rect x="85.4255%" y="309" width="0.1342%" height="15" fill="rgb(209,9,3)" fg:x="8915" fg:w="14"/><text x="85.6755%" y="319.50"></text></g><g><title>_int_malloc (10 samples, 0.10%)</title><rect x="85.4638%" y="293" width="0.0958%" height="15" fill="rgb(230,59,30)" fg:x="8919" fg:w="10"/><text x="85.7138%" y="303.50"></text></g><g><title>malloc_consolidate (7 samples, 0.07%)</title><rect x="85.4925%" y="277" width="0.0671%" height="15" fill="rgb(209,121,21)" fg:x="8922" fg:w="7"/><text x="85.7425%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.02%)</title><rect x="85.5596%" y="357" width="0.0192%" height="15" fill="rgb(220,109,13)" fg:x="8929" fg:w="2"/><text x="85.8096%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.22%)</title><rect x="85.7992%" y="245" width="0.2204%" height="15" fill="rgb(232,18,1)" fg:x="8954" fg:w="23"/><text x="86.0492%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.22%)</title><rect x="85.7992%" y="229" width="0.2204%" height="15" fill="rgb(215,41,42)" fg:x="8954" fg:w="23"/><text x="86.0492%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.22%)</title><rect x="85.7992%" y="213" width="0.2204%" height="15" fill="rgb(224,123,36)" fg:x="8954" fg:w="23"/><text x="86.0492%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.21%)</title><rect x="85.8087%" y="197" width="0.2108%" height="15" fill="rgb(240,125,3)" fg:x="8955" fg:w="22"/><text x="86.0587%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.21%)</title><rect x="85.8087%" y="181" width="0.2108%" height="15" fill="rgb(205,98,50)" fg:x="8955" fg:w="22"/><text x="86.0587%" y="191.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.21%)</title><rect x="85.8087%" y="165" width="0.2108%" height="15" fill="rgb(205,185,37)" fg:x="8955" fg:w="22"/><text x="86.0587%" y="175.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.21%)</title><rect x="85.8087%" y="149" width="0.2108%" height="15" fill="rgb(238,207,15)" fg:x="8955" fg:w="22"/><text x="86.0587%" y="159.50"></text></g><g><title>_int_malloc (17 samples, 0.16%)</title><rect x="85.8567%" y="133" width="0.1629%" height="15" fill="rgb(213,199,42)" fg:x="8960" fg:w="17"/><text x="86.1067%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 0.26%)</title><rect x="85.7896%" y="325" width="0.2587%" height="15" fill="rgb(235,201,11)" fg:x="8953" fg:w="27"/><text x="86.0396%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.25%)</title><rect x="85.7992%" y="309" width="0.2491%" height="15" fill="rgb(207,46,11)" fg:x="8954" fg:w="26"/><text x="86.0492%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.25%)</title><rect x="85.7992%" y="293" width="0.2491%" height="15" fill="rgb(241,35,35)" fg:x="8954" fg:w="26"/><text x="86.0492%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.25%)</title><rect x="85.7992%" y="277" width="0.2491%" height="15" fill="rgb(243,32,47)" fg:x="8954" fg:w="26"/><text x="86.0492%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.25%)</title><rect x="85.7992%" y="261" width="0.2491%" height="15" fill="rgb(247,202,23)" fg:x="8954" fg:w="26"/><text x="86.0492%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="86.0195%" y="245" width="0.0287%" height="15" fill="rgb(219,102,11)" fg:x="8977" fg:w="3"/><text x="86.2695%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="86.0195%" y="229" width="0.0287%" height="15" fill="rgb(243,110,44)" fg:x="8977" fg:w="3"/><text x="86.2695%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="86.0195%" y="213" width="0.0287%" height="15" fill="rgb(222,74,54)" fg:x="8977" fg:w="3"/><text x="86.2695%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.40%)</title><rect x="85.6650%" y="341" width="0.4025%" height="15" fill="rgb(216,99,12)" fg:x="8940" fg:w="42"/><text x="85.9150%" y="351.50"></text></g><g><title>__GI___libc_free (11 samples, 0.11%)</title><rect x="86.0675%" y="341" width="0.1054%" height="15" fill="rgb(226,22,26)" fg:x="8982" fg:w="11"/><text x="86.3175%" y="351.50"></text></g><g><title>_int_free (10 samples, 0.10%)</title><rect x="86.0770%" y="325" width="0.0958%" height="15" fill="rgb(217,163,10)" fg:x="8983" fg:w="10"/><text x="86.3270%" y="335.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.04%)</title><rect x="86.1824%" y="341" width="0.0383%" height="15" fill="rgb(213,25,53)" fg:x="8994" fg:w="4"/><text x="86.4324%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="86.2208%" y="341" width="0.0287%" height="15" fill="rgb(252,105,26)" fg:x="8998" fg:w="3"/><text x="86.4708%" y="351.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="86.2974%" y="277" width="0.0287%" height="15" fill="rgb(220,39,43)" fg:x="9006" fg:w="3"/><text x="86.5474%" y="287.50"></text></g><g><title>malloc_consolidate (5 samples, 0.05%)</title><rect x="86.4220%" y="261" width="0.0479%" height="15" fill="rgb(229,68,48)" fg:x="9019" fg:w="5"/><text x="86.6720%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.22%)</title><rect x="86.2591%" y="341" width="0.2204%" height="15" fill="rgb(252,8,32)" fg:x="9002" fg:w="23"/><text x="86.5091%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.21%)</title><rect x="86.2687%" y="325" width="0.2108%" height="15" fill="rgb(223,20,43)" fg:x="9003" fg:w="22"/><text x="86.5187%" y="335.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.21%)</title><rect x="86.2687%" y="309" width="0.2108%" height="15" fill="rgb(229,81,49)" fg:x="9003" fg:w="22"/><text x="86.5187%" y="319.50"></text></g><g><title>_int_realloc (21 samples, 0.20%)</title><rect x="86.2783%" y="293" width="0.2012%" height="15" fill="rgb(236,28,36)" fg:x="9004" fg:w="21"/><text x="86.5283%" y="303.50"></text></g><g><title>_int_malloc (16 samples, 0.15%)</title><rect x="86.3262%" y="277" width="0.1533%" height="15" fill="rgb(249,185,26)" fg:x="9009" fg:w="16"/><text x="86.5762%" y="287.50"></text></g><g><title>alloc::string::String::with_capacity (4 samples, 0.04%)</title><rect x="86.4987%" y="325" width="0.0383%" height="15" fill="rgb(249,174,33)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.04%)</title><rect x="86.4987%" y="309" width="0.0383%" height="15" fill="rgb(233,201,37)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="86.4987%" y="293" width="0.0383%" height="15" fill="rgb(221,78,26)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="86.4987%" y="277" width="0.0383%" height="15" fill="rgb(250,127,30)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="86.4987%" y="261" width="0.0383%" height="15" fill="rgb(230,49,44)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="86.4987%" y="245" width="0.0383%" height="15" fill="rgb(229,67,23)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="86.4987%" y="229" width="0.0383%" height="15" fill="rgb(249,83,47)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="239.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="86.4987%" y="213" width="0.0383%" height="15" fill="rgb(215,43,3)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="223.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="86.4987%" y="197" width="0.0383%" height="15" fill="rgb(238,154,13)" fg:x="9027" fg:w="4"/><text x="86.7487%" y="207.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="86.5082%" y="181" width="0.0287%" height="15" fill="rgb(219,56,2)" fg:x="9028" fg:w="3"/><text x="86.7582%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (8 samples, 0.08%)</title><rect x="86.4795%" y="341" width="0.0767%" height="15" fill="rgb(233,0,4)" fg:x="9025" fg:w="8"/><text x="86.7295%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="86.7765%" y="325" width="0.0192%" height="15" fill="rgb(235,30,7)" fg:x="9056" fg:w="2"/><text x="87.0265%" y="335.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.22%)</title><rect x="87.0353%" y="133" width="0.2204%" height="15" fill="rgb(250,79,13)" fg:x="9083" fg:w="23"/><text x="87.2853%" y="143.50"></text></g><g><title>_int_malloc (11 samples, 0.11%)</title><rect x="87.1502%" y="117" width="0.1054%" height="15" fill="rgb(211,146,34)" fg:x="9095" fg:w="11"/><text x="87.4002%" y="127.50"></text></g><g><title>__rdl_alloc (5 samples, 0.05%)</title><rect x="87.2557%" y="133" width="0.0479%" height="15" fill="rgb(228,22,38)" fg:x="9106" fg:w="5"/><text x="87.5057%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.05%)</title><rect x="87.2557%" y="117" width="0.0479%" height="15" fill="rgb(235,168,5)" fg:x="9106" fg:w="5"/><text x="87.5057%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.29%)</title><rect x="87.0257%" y="229" width="0.2875%" height="15" fill="rgb(221,155,16)" fg:x="9082" fg:w="30"/><text x="87.2757%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.29%)</title><rect x="87.0257%" y="213" width="0.2875%" height="15" fill="rgb(215,215,53)" fg:x="9082" fg:w="30"/><text x="87.2757%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.29%)</title><rect x="87.0257%" y="197" width="0.2875%" height="15" fill="rgb(223,4,10)" fg:x="9082" fg:w="30"/><text x="87.2757%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.28%)</title><rect x="87.0353%" y="181" width="0.2779%" height="15" fill="rgb(234,103,6)" fg:x="9083" fg:w="29"/><text x="87.2853%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.28%)</title><rect x="87.0353%" y="165" width="0.2779%" height="15" fill="rgb(227,97,0)" fg:x="9083" fg:w="29"/><text x="87.2853%" y="175.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.28%)</title><rect x="87.0353%" y="149" width="0.2779%" height="15" fill="rgb(234,150,53)" fg:x="9083" fg:w="29"/><text x="87.2853%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (39 samples, 0.37%)</title><rect x="87.0161%" y="309" width="0.3737%" height="15" fill="rgb(228,201,54)" fg:x="9081" fg:w="39"/><text x="87.2661%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (38 samples, 0.36%)</title><rect x="87.0257%" y="293" width="0.3641%" height="15" fill="rgb(222,22,37)" fg:x="9082" fg:w="38"/><text x="87.2757%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38 samples, 0.36%)</title><rect x="87.0257%" y="277" width="0.3641%" height="15" fill="rgb(237,53,32)" fg:x="9082" fg:w="38"/><text x="87.2757%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (38 samples, 0.36%)</title><rect x="87.0257%" y="261" width="0.3641%" height="15" fill="rgb(233,25,53)" fg:x="9082" fg:w="38"/><text x="87.2757%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (38 samples, 0.36%)</title><rect x="87.0257%" y="245" width="0.3641%" height="15" fill="rgb(210,40,34)" fg:x="9082" fg:w="38"/><text x="87.2757%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.08%)</title><rect x="87.3131%" y="229" width="0.0767%" height="15" fill="rgb(241,220,44)" fg:x="9112" fg:w="8"/><text x="87.5631%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.08%)</title><rect x="87.3131%" y="213" width="0.0767%" height="15" fill="rgb(235,28,35)" fg:x="9112" fg:w="8"/><text x="87.5631%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.08%)</title><rect x="87.3131%" y="197" width="0.0767%" height="15" fill="rgb(210,56,17)" fg:x="9112" fg:w="8"/><text x="87.5631%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (63 samples, 0.60%)</title><rect x="86.7957%" y="325" width="0.6037%" height="15" fill="rgb(224,130,29)" fg:x="9058" fg:w="63"/><text x="87.0457%" y="335.50"></text></g><g><title>__GI___libc_free (22 samples, 0.21%)</title><rect x="87.3994%" y="325" width="0.2108%" height="15" fill="rgb(235,212,8)" fg:x="9121" fg:w="22"/><text x="87.6494%" y="335.50"></text></g><g><title>_int_free (15 samples, 0.14%)</title><rect x="87.4665%" y="309" width="0.1437%" height="15" fill="rgb(223,33,50)" fg:x="9128" fg:w="15"/><text x="87.7165%" y="319.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="87.5910%" y="293" width="0.0192%" height="15" fill="rgb(219,149,13)" fg:x="9141" fg:w="2"/><text x="87.8410%" y="303.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 0.11%)</title><rect x="87.6102%" y="325" width="0.1054%" height="15" fill="rgb(250,156,29)" fg:x="9143" fg:w="11"/><text x="87.8602%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="87.7156%" y="325" width="0.0287%" height="15" fill="rgb(216,193,19)" fg:x="9154" fg:w="3"/><text x="87.9656%" y="335.50"></text></g><g><title>_int_free (5 samples, 0.05%)</title><rect x="87.8402%" y="261" width="0.0479%" height="15" fill="rgb(216,135,14)" fg:x="9167" fg:w="5"/><text x="88.0902%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.25%)</title><rect x="87.7539%" y="325" width="0.2491%" height="15" fill="rgb(241,47,5)" fg:x="9158" fg:w="26"/><text x="88.0039%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.23%)</title><rect x="87.7731%" y="309" width="0.2300%" height="15" fill="rgb(233,42,35)" fg:x="9160" fg:w="24"/><text x="88.0231%" y="319.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.22%)</title><rect x="87.7827%" y="293" width="0.2204%" height="15" fill="rgb(231,13,6)" fg:x="9161" fg:w="23"/><text x="88.0327%" y="303.50"></text></g><g><title>_int_realloc (21 samples, 0.20%)</title><rect x="87.8018%" y="277" width="0.2012%" height="15" fill="rgb(207,181,40)" fg:x="9163" fg:w="21"/><text x="88.0518%" y="287.50"></text></g><g><title>_int_malloc (12 samples, 0.11%)</title><rect x="87.8881%" y="261" width="0.1150%" height="15" fill="rgb(254,173,49)" fg:x="9172" fg:w="12"/><text x="88.1381%" y="271.50"></text></g><g><title>alloc::string::String::with_capacity (2 samples, 0.02%)</title><rect x="88.0414%" y="309" width="0.0192%" height="15" fill="rgb(221,1,38)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="88.0414%" y="293" width="0.0192%" height="15" fill="rgb(206,124,46)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="88.0414%" y="277" width="0.0192%" height="15" fill="rgb(249,21,11)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="88.0414%" y="261" width="0.0192%" height="15" fill="rgb(222,201,40)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="88.0414%" y="245" width="0.0192%" height="15" fill="rgb(235,61,29)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="88.0414%" y="229" width="0.0192%" height="15" fill="rgb(219,207,3)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="88.0414%" y="213" width="0.0192%" height="15" fill="rgb(222,56,46)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="88.0414%" y="197" width="0.0192%" height="15" fill="rgb(239,76,54)" fg:x="9188" fg:w="2"/><text x="88.2914%" y="207.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (7 samples, 0.07%)</title><rect x="88.0031%" y="325" width="0.0671%" height="15" fill="rgb(231,124,27)" fg:x="9184" fg:w="7"/><text x="88.2531%" y="335.50"></text></g><g><title>__GI___libc_malloc (42 samples, 0.40%)</title><rect x="88.8750%" y="117" width="0.4025%" height="15" fill="rgb(249,195,6)" fg:x="9275" fg:w="42"/><text x="89.1250%" y="127.50"></text></g><g><title>_int_malloc (30 samples, 0.29%)</title><rect x="88.9900%" y="101" width="0.2875%" height="15" fill="rgb(237,174,47)" fg:x="9287" fg:w="30"/><text x="89.2400%" y="111.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="89.2583%" y="85" width="0.0192%" height="15" fill="rgb(206,201,31)" fg:x="9315" fg:w="2"/><text x="89.5083%" y="95.50"></text></g><g><title>__rdl_alloc (5 samples, 0.05%)</title><rect x="89.2775%" y="117" width="0.0479%" height="15" fill="rgb(231,57,52)" fg:x="9317" fg:w="5"/><text x="89.5275%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.05%)</title><rect x="89.2775%" y="101" width="0.0479%" height="15" fill="rgb(248,177,22)" fg:x="9317" fg:w="5"/><text x="89.5275%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (52 samples, 0.50%)</title><rect x="88.8463%" y="213" width="0.4983%" height="15" fill="rgb(215,211,37)" fg:x="9272" fg:w="52"/><text x="89.0963%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (52 samples, 0.50%)</title><rect x="88.8463%" y="197" width="0.4983%" height="15" fill="rgb(241,128,51)" fg:x="9272" fg:w="52"/><text x="89.0963%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (52 samples, 0.50%)</title><rect x="88.8463%" y="181" width="0.4983%" height="15" fill="rgb(227,165,31)" fg:x="9272" fg:w="52"/><text x="89.0963%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.48%)</title><rect x="88.8655%" y="165" width="0.4791%" height="15" fill="rgb(228,167,24)" fg:x="9274" fg:w="50"/><text x="89.1155%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.48%)</title><rect x="88.8655%" y="149" width="0.4791%" height="15" fill="rgb(228,143,12)" fg:x="9274" fg:w="50"/><text x="89.1155%" y="159.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.48%)</title><rect x="88.8655%" y="133" width="0.4791%" height="15" fill="rgb(249,149,8)" fg:x="9274" fg:w="50"/><text x="89.1155%" y="143.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="89.3254%" y="117" width="0.0192%" height="15" fill="rgb(243,35,44)" fg:x="9322" fg:w="2"/><text x="89.5754%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (63 samples, 0.60%)</title><rect x="88.7984%" y="293" width="0.6037%" height="15" fill="rgb(246,89,9)" fg:x="9267" fg:w="63"/><text x="89.0484%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (58 samples, 0.56%)</title><rect x="88.8463%" y="277" width="0.5558%" height="15" fill="rgb(233,213,13)" fg:x="9272" fg:w="58"/><text x="89.0963%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (58 samples, 0.56%)</title><rect x="88.8463%" y="261" width="0.5558%" height="15" fill="rgb(233,141,41)" fg:x="9272" fg:w="58"/><text x="89.0963%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (58 samples, 0.56%)</title><rect x="88.8463%" y="245" width="0.5558%" height="15" fill="rgb(239,167,4)" fg:x="9272" fg:w="58"/><text x="89.0963%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (58 samples, 0.56%)</title><rect x="88.8463%" y="229" width="0.5558%" height="15" fill="rgb(209,217,16)" fg:x="9272" fg:w="58"/><text x="89.0963%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.06%)</title><rect x="89.3446%" y="213" width="0.0575%" height="15" fill="rgb(219,88,35)" fg:x="9324" fg:w="6"/><text x="89.5946%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.06%)</title><rect x="89.3446%" y="197" width="0.0575%" height="15" fill="rgb(220,193,23)" fg:x="9324" fg:w="6"/><text x="89.5946%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="89.3542%" y="181" width="0.0479%" height="15" fill="rgb(230,90,52)" fg:x="9325" fg:w="5"/><text x="89.6042%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (107 samples, 1.03%)</title><rect x="88.4151%" y="309" width="1.0253%" height="15" fill="rgb(252,106,19)" fg:x="9227" fg:w="107"/><text x="88.6651%" y="319.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="89.4021%" y="293" width="0.0383%" height="15" fill="rgb(206,74,20)" fg:x="9330" fg:w="4"/><text x="89.6521%" y="303.50"></text></g><g><title>__GI___libc_free (39 samples, 0.37%)</title><rect x="89.4404%" y="309" width="0.3737%" height="15" fill="rgb(230,138,44)" fg:x="9334" fg:w="39"/><text x="89.6904%" y="319.50"></text></g><g><title>_int_free (29 samples, 0.28%)</title><rect x="89.5362%" y="293" width="0.2779%" height="15" fill="rgb(235,182,43)" fg:x="9344" fg:w="29"/><text x="89.7862%" y="303.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="89.8141%" y="309" width="0.0287%" height="15" fill="rgb(242,16,51)" fg:x="9373" fg:w="3"/><text x="90.0641%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.06%)</title><rect x="89.8429%" y="309" width="0.0575%" height="15" fill="rgb(248,9,4)" fg:x="9376" fg:w="6"/><text x="90.0929%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="89.9003%" y="309" width="0.0192%" height="15" fill="rgb(210,31,22)" fg:x="9382" fg:w="2"/><text x="90.1503%" y="319.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="89.9195%" y="309" width="0.0192%" height="15" fill="rgb(239,54,39)" fg:x="9384" fg:w="2"/><text x="90.1695%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="89.9195%" y="293" width="0.0192%" height="15" fill="rgb(230,99,41)" fg:x="9384" fg:w="2"/><text x="90.1695%" y="303.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="89.9387%" y="277" width="0.0287%" height="15" fill="rgb(253,106,12)" fg:x="9386" fg:w="3"/><text x="90.1887%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="90.0057%" y="245" width="0.0383%" height="15" fill="rgb(213,46,41)" fg:x="9393" fg:w="4"/><text x="90.2557%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.21%)</title><rect x="89.9387%" y="309" width="0.2108%" height="15" fill="rgb(215,133,35)" fg:x="9386" fg:w="22"/><text x="90.1887%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.21%)</title><rect x="89.9387%" y="293" width="0.2108%" height="15" fill="rgb(213,28,5)" fg:x="9386" fg:w="22"/><text x="90.1887%" y="303.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.18%)</title><rect x="89.9674%" y="277" width="0.1821%" height="15" fill="rgb(215,77,49)" fg:x="9389" fg:w="19"/><text x="90.2174%" y="287.50"></text></g><g><title>_int_realloc (17 samples, 0.16%)</title><rect x="89.9866%" y="261" width="0.1629%" height="15" fill="rgb(248,100,22)" fg:x="9391" fg:w="17"/><text x="90.2366%" y="271.50"></text></g><g><title>_int_malloc (10 samples, 0.10%)</title><rect x="90.0537%" y="245" width="0.0958%" height="15" fill="rgb(208,67,9)" fg:x="9398" fg:w="10"/><text x="90.3037%" y="255.50"></text></g><g><title>alloc::string::String::with_capacity (4 samples, 0.04%)</title><rect x="90.1686%" y="293" width="0.0383%" height="15" fill="rgb(219,133,21)" fg:x="9410" fg:w="4"/><text x="90.4186%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="90.1878%" y="277" width="0.0192%" height="15" fill="rgb(246,46,29)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="90.1878%" y="261" width="0.0192%" height="15" fill="rgb(246,185,52)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="90.1878%" y="245" width="0.0192%" height="15" fill="rgb(252,136,11)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="90.1878%" y="229" width="0.0192%" height="15" fill="rgb(219,138,53)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="90.1878%" y="213" width="0.0192%" height="15" fill="rgb(211,51,23)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="90.1878%" y="197" width="0.0192%" height="15" fill="rgb(247,221,28)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="90.1878%" y="181" width="0.0192%" height="15" fill="rgb(251,222,45)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="191.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="90.1878%" y="165" width="0.0192%" height="15" fill="rgb(217,162,53)" fg:x="9412" fg:w="2"/><text x="90.4378%" y="175.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (8 samples, 0.08%)</title><rect x="90.1495%" y="309" width="0.0767%" height="15" fill="rgb(229,93,14)" fg:x="9408" fg:w="8"/><text x="90.3995%" y="319.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (2 samples, 0.02%)</title><rect x="90.2070%" y="293" width="0.0192%" height="15" fill="rgb(209,67,49)" fg:x="9414" fg:w="2"/><text x="90.4570%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="90.6286%" y="293" width="0.0287%" height="15" fill="rgb(213,87,29)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="90.6286%" y="277" width="0.0287%" height="15" fill="rgb(205,151,52)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="90.6286%" y="261" width="0.0287%" height="15" fill="rgb(253,215,39)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="90.6286%" y="245" width="0.0287%" height="15" fill="rgb(221,220,41)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="90.6286%" y="229" width="0.0287%" height="15" fill="rgb(218,133,21)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="90.6286%" y="213" width="0.0287%" height="15" fill="rgb(221,193,43)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="90.6286%" y="197" width="0.0287%" height="15" fill="rgb(240,128,52)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="90.6286%" y="181" width="0.0287%" height="15" fill="rgb(253,114,12)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="90.6286%" y="165" width="0.0287%" height="15" fill="rgb(215,223,47)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="90.6286%" y="149" width="0.0287%" height="15" fill="rgb(248,225,23)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="159.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="90.6286%" y="133" width="0.0287%" height="15" fill="rgb(250,108,0)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="143.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="90.6286%" y="117" width="0.0287%" height="15" fill="rgb(228,208,7)" fg:x="9458" fg:w="3"/><text x="90.8786%" y="127.50"></text></g><g><title>__GI___libc_malloc (77 samples, 0.74%)</title><rect x="91.2419%" y="101" width="0.7378%" height="15" fill="rgb(244,45,10)" fg:x="9522" fg:w="77"/><text x="91.4919%" y="111.50"></text></g><g><title>_int_malloc (60 samples, 0.57%)</title><rect x="91.4048%" y="85" width="0.5749%" height="15" fill="rgb(207,125,25)" fg:x="9539" fg:w="60"/><text x="91.6548%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 0.86%)</title><rect x="91.2035%" y="197" width="0.8624%" height="15" fill="rgb(210,195,18)" fg:x="9518" fg:w="90"/><text x="91.4535%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.86%)</title><rect x="91.2035%" y="181" width="0.8624%" height="15" fill="rgb(249,80,12)" fg:x="9518" fg:w="90"/><text x="91.4535%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.86%)</title><rect x="91.2035%" y="165" width="0.8624%" height="15" fill="rgb(221,65,9)" fg:x="9518" fg:w="90"/><text x="91.4535%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.85%)</title><rect x="91.2131%" y="149" width="0.8528%" height="15" fill="rgb(235,49,36)" fg:x="9519" fg:w="89"/><text x="91.4631%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.85%)</title><rect x="91.2131%" y="133" width="0.8528%" height="15" fill="rgb(225,32,20)" fg:x="9519" fg:w="89"/><text x="91.4631%" y="143.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.85%)</title><rect x="91.2131%" y="117" width="0.8528%" height="15" fill="rgb(215,141,46)" fg:x="9519" fg:w="89"/><text x="91.4631%" y="127.50"></text></g><g><title>__rdl_alloc (9 samples, 0.09%)</title><rect x="91.9797%" y="101" width="0.0862%" height="15" fill="rgb(250,160,47)" fg:x="9599" fg:w="9"/><text x="92.2297%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.09%)</title><rect x="91.9797%" y="85" width="0.0862%" height="15" fill="rgb(216,222,40)" fg:x="9599" fg:w="9"/><text x="92.2297%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (110 samples, 1.05%)</title><rect x="91.1077%" y="277" width="1.0540%" height="15" fill="rgb(234,217,39)" fg:x="9508" fg:w="110"/><text x="91.3577%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.96%)</title><rect x="91.2035%" y="261" width="0.9582%" height="15" fill="rgb(207,178,40)" fg:x="9518" fg:w="100"/><text x="91.4535%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.96%)</title><rect x="91.2035%" y="245" width="0.9582%" height="15" fill="rgb(221,136,13)" fg:x="9518" fg:w="100"/><text x="91.4535%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (100 samples, 0.96%)</title><rect x="91.2035%" y="229" width="0.9582%" height="15" fill="rgb(249,199,10)" fg:x="9518" fg:w="100"/><text x="91.4535%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (100 samples, 0.96%)</title><rect x="91.2035%" y="213" width="0.9582%" height="15" fill="rgb(249,222,13)" fg:x="9518" fg:w="100"/><text x="91.4535%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.10%)</title><rect x="92.0659%" y="197" width="0.0958%" height="15" fill="rgb(244,185,38)" fg:x="9608" fg:w="10"/><text x="92.3159%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.10%)</title><rect x="92.0659%" y="181" width="0.0958%" height="15" fill="rgb(236,202,9)" fg:x="9608" fg:w="10"/><text x="92.3159%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.09%)</title><rect x="92.0755%" y="165" width="0.0862%" height="15" fill="rgb(250,229,37)" fg:x="9609" fg:w="9"/><text x="92.3255%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (162 samples, 1.55%)</title><rect x="90.6573%" y="293" width="1.5523%" height="15" fill="rgb(206,174,23)" fg:x="9461" fg:w="162"/><text x="90.9073%" y="303.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.05%)</title><rect x="92.1617%" y="277" width="0.0479%" height="15" fill="rgb(211,33,43)" fg:x="9618" fg:w="5"/><text x="92.4117%" y="287.50"></text></g><g><title>[day12] (3 samples, 0.03%)</title><rect x="92.3821%" y="277" width="0.0287%" height="15" fill="rgb(245,58,50)" fg:x="9641" fg:w="3"/><text x="92.6321%" y="287.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="92.3821%" y="261" width="0.0287%" height="15" fill="rgb(244,68,36)" fg:x="9641" fg:w="3"/><text x="92.6321%" y="271.50"></text></g><g><title>__GI___libc_free (54 samples, 0.52%)</title><rect x="92.2097%" y="293" width="0.5174%" height="15" fill="rgb(232,229,15)" fg:x="9623" fg:w="54"/><text x="92.4597%" y="303.50"></text></g><g><title>_int_free (33 samples, 0.32%)</title><rect x="92.4109%" y="277" width="0.3162%" height="15" fill="rgb(254,30,23)" fg:x="9644" fg:w="33"/><text x="92.6609%" y="287.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="92.7271%" y="293" width="0.0383%" height="15" fill="rgb(235,160,14)" fg:x="9677" fg:w="4"/><text x="92.9771%" y="303.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="92.7367%" y="277" width="0.0287%" height="15" fill="rgb(212,155,44)" fg:x="9678" fg:w="3"/><text x="92.9867%" y="287.50"></text></g><g><title>__memcmp_avx2_movbe (20 samples, 0.19%)</title><rect x="92.7654%" y="293" width="0.1916%" height="15" fill="rgb(226,2,50)" fg:x="9681" fg:w="20"/><text x="93.0154%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="92.9571%" y="293" width="0.0383%" height="15" fill="rgb(234,177,6)" fg:x="9701" fg:w="4"/><text x="93.2071%" y="303.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="93.0146%" y="293" width="0.0192%" height="15" fill="rgb(217,24,9)" fg:x="9707" fg:w="2"/><text x="93.2646%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="93.1487%" y="229" width="0.0479%" height="15" fill="rgb(220,13,46)" fg:x="9721" fg:w="5"/><text x="93.3987%" y="239.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="93.1966%" y="229" width="0.0287%" height="15" fill="rgb(239,221,27)" fg:x="9726" fg:w="3"/><text x="93.4466%" y="239.50"></text></g><g><title>__GI___libc_realloc (30 samples, 0.29%)</title><rect x="93.0912%" y="261" width="0.2875%" height="15" fill="rgb(222,198,25)" fg:x="9715" fg:w="30"/><text x="93.3412%" y="271.50"></text></g><g><title>_int_realloc (27 samples, 0.26%)</title><rect x="93.1200%" y="245" width="0.2587%" height="15" fill="rgb(211,99,13)" fg:x="9718" fg:w="27"/><text x="93.3700%" y="255.50"></text></g><g><title>_int_malloc (16 samples, 0.15%)</title><rect x="93.2254%" y="229" width="0.1533%" height="15" fill="rgb(232,111,31)" fg:x="9729" fg:w="16"/><text x="93.4754%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (37 samples, 0.35%)</title><rect x="93.0337%" y="293" width="0.3545%" height="15" fill="rgb(245,82,37)" fg:x="9709" fg:w="37"/><text x="93.2837%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 0.33%)</title><rect x="93.0625%" y="277" width="0.3258%" height="15" fill="rgb(227,149,46)" fg:x="9712" fg:w="34"/><text x="93.3125%" y="287.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.02%)</title><rect x="93.4266%" y="277" width="0.0192%" height="15" fill="rgb(218,36,50)" fg:x="9750" fg:w="2"/><text x="93.6766%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="93.4266%" y="261" width="0.0192%" height="15" fill="rgb(226,80,48)" fg:x="9750" fg:w="2"/><text x="93.6766%" y="271.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.13%)</title><rect x="93.4458%" y="149" width="0.1342%" height="15" fill="rgb(238,224,15)" fg:x="9752" fg:w="14"/><text x="93.6958%" y="159.50"></text></g><g><title>_int_malloc (6 samples, 0.06%)</title><rect x="93.5224%" y="133" width="0.0575%" height="15" fill="rgb(241,136,10)" fg:x="9760" fg:w="6"/><text x="93.7724%" y="143.50"></text></g><g><title>alloc::string::String::with_capacity (15 samples, 0.14%)</title><rect x="93.4458%" y="277" width="0.1437%" height="15" fill="rgb(208,32,45)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.14%)</title><rect x="93.4458%" y="261" width="0.1437%" height="15" fill="rgb(207,135,9)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.14%)</title><rect x="93.4458%" y="245" width="0.1437%" height="15" fill="rgb(206,86,44)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.14%)</title><rect x="93.4458%" y="229" width="0.1437%" height="15" fill="rgb(245,177,15)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.14%)</title><rect x="93.4458%" y="213" width="0.1437%" height="15" fill="rgb(206,64,50)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.14%)</title><rect x="93.4458%" y="197" width="0.1437%" height="15" fill="rgb(234,36,40)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.14%)</title><rect x="93.4458%" y="181" width="0.1437%" height="15" fill="rgb(213,64,8)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="191.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.14%)</title><rect x="93.4458%" y="165" width="0.1437%" height="15" fill="rgb(210,75,36)" fg:x="9752" fg:w="15"/><text x="93.6958%" y="175.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (22 samples, 0.21%)</title><rect x="93.3883%" y="293" width="0.2108%" height="15" fill="rgb(229,88,21)" fg:x="9746" fg:w="22"/><text x="93.6383%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="93.9153%" y="197" width="0.0287%" height="15" fill="rgb(252,204,47)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="93.9153%" y="181" width="0.0287%" height="15" fill="rgb(208,77,27)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="93.9153%" y="165" width="0.0287%" height="15" fill="rgb(221,76,26)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="93.9153%" y="149" width="0.0287%" height="15" fill="rgb(225,139,18)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="93.9153%" y="133" width="0.0287%" height="15" fill="rgb(230,137,11)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="143.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="93.9153%" y="117" width="0.0287%" height="15" fill="rgb(212,28,1)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="127.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="93.9153%" y="101" width="0.0287%" height="15" fill="rgb(248,164,17)" fg:x="9801" fg:w="3"/><text x="94.1653%" y="111.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="93.9249%" y="85" width="0.0192%" height="15" fill="rgb(222,171,42)" fg:x="9802" fg:w="2"/><text x="94.1749%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="93.9153%" y="277" width="0.0383%" height="15" fill="rgb(243,84,45)" fg:x="9801" fg:w="4"/><text x="94.1653%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="93.9153%" y="261" width="0.0383%" height="15" fill="rgb(252,49,23)" fg:x="9801" fg:w="4"/><text x="94.1653%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.04%)</title><rect x="93.9153%" y="245" width="0.0383%" height="15" fill="rgb(215,19,7)" fg:x="9801" fg:w="4"/><text x="94.1653%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.04%)</title><rect x="93.9153%" y="229" width="0.0383%" height="15" fill="rgb(238,81,41)" fg:x="9801" fg:w="4"/><text x="94.1653%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.04%)</title><rect x="93.9153%" y="213" width="0.0383%" height="15" fill="rgb(210,199,37)" fg:x="9801" fg:w="4"/><text x="94.1653%" y="223.50"></text></g><g><title>__GI___libc_malloc (65 samples, 0.62%)</title><rect x="94.5573%" y="85" width="0.6228%" height="15" fill="rgb(244,192,49)" fg:x="9868" fg:w="65"/><text x="94.8073%" y="95.50"></text></g><g><title>_int_malloc (48 samples, 0.46%)</title><rect x="94.7202%" y="69" width="0.4599%" height="15" fill="rgb(226,211,11)" fg:x="9885" fg:w="48"/><text x="94.9702%" y="79.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="95.1610%" y="53" width="0.0192%" height="15" fill="rgb(236,162,54)" fg:x="9931" fg:w="2"/><text x="95.4110%" y="63.50"></text></g><g><title>__rdl_alloc (5 samples, 0.05%)</title><rect x="95.1801%" y="85" width="0.0479%" height="15" fill="rgb(220,229,9)" fg:x="9933" fg:w="5"/><text x="95.4301%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.05%)</title><rect x="95.1801%" y="69" width="0.0479%" height="15" fill="rgb(250,87,22)" fg:x="9933" fg:w="5"/><text x="95.4301%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 0.78%)</title><rect x="94.4902%" y="181" width="0.7762%" height="15" fill="rgb(239,43,17)" fg:x="9861" fg:w="81"/><text x="94.7402%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (81 samples, 0.78%)</title><rect x="94.4902%" y="165" width="0.7762%" height="15" fill="rgb(231,177,25)" fg:x="9861" fg:w="81"/><text x="94.7402%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (81 samples, 0.78%)</title><rect x="94.4902%" y="149" width="0.7762%" height="15" fill="rgb(219,179,1)" fg:x="9861" fg:w="81"/><text x="94.7402%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 0.75%)</title><rect x="94.5190%" y="133" width="0.7474%" height="15" fill="rgb(238,219,53)" fg:x="9864" fg:w="78"/><text x="94.7690%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 0.75%)</title><rect x="94.5190%" y="117" width="0.7474%" height="15" fill="rgb(232,167,36)" fg:x="9864" fg:w="78"/><text x="94.7690%" y="127.50"></text></g><g><title>alloc::alloc::alloc (78 samples, 0.75%)</title><rect x="94.5190%" y="101" width="0.7474%" height="15" fill="rgb(244,19,51)" fg:x="9864" fg:w="78"/><text x="94.7690%" y="111.50"></text></g><g><title>__rust_alloc (4 samples, 0.04%)</title><rect x="95.2281%" y="85" width="0.0383%" height="15" fill="rgb(224,6,22)" fg:x="9938" fg:w="4"/><text x="95.4781%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (152 samples, 1.46%)</title><rect x="93.9536%" y="277" width="1.4565%" height="15" fill="rgb(224,145,5)" fg:x="9805" fg:w="152"/><text x="94.2036%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (103 samples, 0.99%)</title><rect x="94.4232%" y="261" width="0.9870%" height="15" fill="rgb(234,130,49)" fg:x="9854" fg:w="103"/><text x="94.6732%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (96 samples, 0.92%)</title><rect x="94.4902%" y="245" width="0.9199%" height="15" fill="rgb(254,6,2)" fg:x="9861" fg:w="96"/><text x="94.7402%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96 samples, 0.92%)</title><rect x="94.4902%" y="229" width="0.9199%" height="15" fill="rgb(208,96,46)" fg:x="9861" fg:w="96"/><text x="94.7402%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 0.92%)</title><rect x="94.4902%" y="213" width="0.9199%" height="15" fill="rgb(239,3,39)" fg:x="9861" fg:w="96"/><text x="94.7402%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.92%)</title><rect x="94.4902%" y="197" width="0.9199%" height="15" fill="rgb(233,210,1)" fg:x="9861" fg:w="96"/><text x="94.7402%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.14%)</title><rect x="95.2664%" y="181" width="0.1437%" height="15" fill="rgb(244,137,37)" fg:x="9942" fg:w="15"/><text x="95.5164%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.14%)</title><rect x="95.2664%" y="165" width="0.1437%" height="15" fill="rgb(240,136,2)" fg:x="9942" fg:w="15"/><text x="95.5164%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.14%)</title><rect x="95.2664%" y="149" width="0.1437%" height="15" fill="rgb(239,18,37)" fg:x="9942" fg:w="15"/><text x="95.5164%" y="159.50"></text></g><g><title>__GI___libc_free (64 samples, 0.61%)</title><rect x="95.4101%" y="277" width="0.6133%" height="15" fill="rgb(218,185,22)" fg:x="9957" fg:w="64"/><text x="95.6601%" y="287.50"></text></g><g><title>_int_free (41 samples, 0.39%)</title><rect x="95.6305%" y="261" width="0.3929%" height="15" fill="rgb(225,218,4)" fg:x="9980" fg:w="41"/><text x="95.8805%" y="271.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="96.0234%" y="277" width="0.0287%" height="15" fill="rgb(230,182,32)" fg:x="10021" fg:w="3"/><text x="96.2734%" y="287.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="96.0330%" y="261" width="0.0192%" height="15" fill="rgb(242,56,43)" fg:x="10022" fg:w="2"/><text x="96.2830%" y="271.50"></text></g><g><title>__memcmp_avx2_movbe (23 samples, 0.22%)</title><rect x="96.0521%" y="277" width="0.2204%" height="15" fill="rgb(233,99,24)" fg:x="10024" fg:w="23"/><text x="96.3021%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="96.2725%" y="277" width="0.0287%" height="15" fill="rgb(234,209,42)" fg:x="10047" fg:w="3"/><text x="96.5225%" y="287.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.05%)</title><rect x="96.3108%" y="277" width="0.0479%" height="15" fill="rgb(227,7,12)" fg:x="10051" fg:w="5"/><text x="96.5608%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.05%)</title><rect x="96.3108%" y="261" width="0.0479%" height="15" fill="rgb(245,203,43)" fg:x="10051" fg:w="5"/><text x="96.5608%" y="271.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="96.3588%" y="277" width="0.0192%" height="15" fill="rgb(238,205,33)" fg:x="10056" fg:w="2"/><text x="96.6088%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="96.5025%" y="213" width="0.0287%" height="15" fill="rgb(231,56,7)" fg:x="10071" fg:w="3"/><text x="96.7525%" y="223.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="96.5312%" y="213" width="0.0192%" height="15" fill="rgb(244,186,29)" fg:x="10074" fg:w="2"/><text x="96.7812%" y="223.50"></text></g><g><title>__GI___libc_realloc (41 samples, 0.39%)</title><rect x="96.4354%" y="245" width="0.3929%" height="15" fill="rgb(234,111,31)" fg:x="10064" fg:w="41"/><text x="96.6854%" y="255.50"></text></g><g><title>_int_realloc (38 samples, 0.36%)</title><rect x="96.4642%" y="229" width="0.3641%" height="15" fill="rgb(241,149,10)" fg:x="10067" fg:w="38"/><text x="96.7142%" y="239.50"></text></g><g><title>_int_malloc (29 samples, 0.28%)</title><rect x="96.5504%" y="213" width="0.2779%" height="15" fill="rgb(249,206,44)" fg:x="10076" fg:w="29"/><text x="96.8004%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 0.46%)</title><rect x="96.3779%" y="277" width="0.4599%" height="15" fill="rgb(251,153,30)" fg:x="10058" fg:w="48"/><text x="96.6279%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (44 samples, 0.42%)</title><rect x="96.4163%" y="261" width="0.4216%" height="15" fill="rgb(239,152,38)" fg:x="10062" fg:w="44"/><text x="96.6663%" y="271.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.03%)</title><rect x="96.8762%" y="261" width="0.0287%" height="15" fill="rgb(249,139,47)" fg:x="10110" fg:w="3"/><text x="97.1262%" y="271.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.11%)</title><rect x="96.9145%" y="133" width="0.1150%" height="15" fill="rgb(244,64,35)" fg:x="10114" fg:w="12"/><text x="97.1645%" y="143.50"></text></g><g><title>_int_malloc (6 samples, 0.06%)</title><rect x="96.9720%" y="117" width="0.0575%" height="15" fill="rgb(216,46,15)" fg:x="10120" fg:w="6"/><text x="97.2220%" y="127.50"></text></g><g><title>alloc::string::String::with_capacity (14 samples, 0.13%)</title><rect x="96.9049%" y="261" width="0.1342%" height="15" fill="rgb(250,74,19)" fg:x="10113" fg:w="14"/><text x="97.1549%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.12%)</title><rect x="96.9145%" y="245" width="0.1246%" height="15" fill="rgb(249,42,33)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.12%)</title><rect x="96.9145%" y="229" width="0.1246%" height="15" fill="rgb(242,149,17)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.12%)</title><rect x="96.9145%" y="213" width="0.1246%" height="15" fill="rgb(244,29,21)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.12%)</title><rect x="96.9145%" y="197" width="0.1246%" height="15" fill="rgb(220,130,37)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.12%)</title><rect x="96.9145%" y="181" width="0.1246%" height="15" fill="rgb(211,67,2)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.12%)</title><rect x="96.9145%" y="165" width="0.1246%" height="15" fill="rgb(235,68,52)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="175.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.12%)</title><rect x="96.9145%" y="149" width="0.1246%" height="15" fill="rgb(246,142,3)" fg:x="10114" fg:w="13"/><text x="97.1645%" y="159.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (22 samples, 0.21%)</title><rect x="96.8379%" y="277" width="0.2108%" height="15" fill="rgb(241,25,7)" fg:x="10106" fg:w="22"/><text x="97.0879%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="97.3266%" y="181" width="0.0287%" height="15" fill="rgb(242,119,39)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="97.3266%" y="165" width="0.0287%" height="15" fill="rgb(241,98,45)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="97.3266%" y="149" width="0.0287%" height="15" fill="rgb(254,28,30)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="97.3266%" y="133" width="0.0287%" height="15" fill="rgb(241,142,54)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="97.3266%" y="117" width="0.0287%" height="15" fill="rgb(222,85,15)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="127.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="97.3266%" y="101" width="0.0287%" height="15" fill="rgb(210,85,47)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="111.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="97.3266%" y="85" width="0.0287%" height="15" fill="rgb(224,206,25)" fg:x="10157" fg:w="3"/><text x="97.5766%" y="95.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="97.3361%" y="69" width="0.0192%" height="15" fill="rgb(243,201,19)" fg:x="10158" fg:w="2"/><text x="97.5861%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="97.3266%" y="261" width="0.0383%" height="15" fill="rgb(236,59,4)" fg:x="10157" fg:w="4"/><text x="97.5766%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="97.3266%" y="245" width="0.0383%" height="15" fill="rgb(254,179,45)" fg:x="10157" fg:w="4"/><text x="97.5766%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.04%)</title><rect x="97.3266%" y="229" width="0.0383%" height="15" fill="rgb(226,14,10)" fg:x="10157" fg:w="4"/><text x="97.5766%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.04%)</title><rect x="97.3266%" y="213" width="0.0383%" height="15" fill="rgb(244,27,41)" fg:x="10157" fg:w="4"/><text x="97.5766%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.04%)</title><rect x="97.3266%" y="197" width="0.0383%" height="15" fill="rgb(235,35,32)" fg:x="10157" fg:w="4"/><text x="97.5766%" y="207.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.42%)</title><rect x="97.6236%" y="69" width="0.4216%" height="15" fill="rgb(218,68,31)" fg:x="10188" fg:w="44"/><text x="97.8736%" y="79.50"></text></g><g><title>_int_malloc (33 samples, 0.32%)</title><rect x="97.7290%" y="53" width="0.3162%" height="15" fill="rgb(207,120,37)" fg:x="10199" fg:w="33"/><text x="97.9790%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.45%)</title><rect x="97.6140%" y="165" width="0.4504%" height="15" fill="rgb(227,98,0)" fg:x="10187" fg:w="47"/><text x="97.8640%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.45%)</title><rect x="97.6140%" y="149" width="0.4504%" height="15" fill="rgb(207,7,3)" fg:x="10187" fg:w="47"/><text x="97.8640%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.45%)</title><rect x="97.6140%" y="133" width="0.4504%" height="15" fill="rgb(206,98,19)" fg:x="10187" fg:w="47"/><text x="97.8640%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.45%)</title><rect x="97.6140%" y="117" width="0.4504%" height="15" fill="rgb(217,5,26)" fg:x="10187" fg:w="47"/><text x="97.8640%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.45%)</title><rect x="97.6140%" y="101" width="0.4504%" height="15" fill="rgb(235,190,38)" fg:x="10187" fg:w="47"/><text x="97.8640%" y="111.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.45%)</title><rect x="97.6140%" y="85" width="0.4504%" height="15" fill="rgb(247,86,24)" fg:x="10187" fg:w="47"/><text x="97.8640%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (55 samples, 0.53%)</title><rect x="97.5853%" y="245" width="0.5270%" height="15" fill="rgb(205,101,16)" fg:x="10184" fg:w="55"/><text x="97.8353%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (52 samples, 0.50%)</title><rect x="97.6140%" y="229" width="0.4983%" height="15" fill="rgb(246,168,33)" fg:x="10187" fg:w="52"/><text x="97.8640%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (52 samples, 0.50%)</title><rect x="97.6140%" y="213" width="0.4983%" height="15" fill="rgb(231,114,1)" fg:x="10187" fg:w="52"/><text x="97.8640%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (52 samples, 0.50%)</title><rect x="97.6140%" y="197" width="0.4983%" height="15" fill="rgb(207,184,53)" fg:x="10187" fg:w="52"/><text x="97.8640%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (52 samples, 0.50%)</title><rect x="97.6140%" y="181" width="0.4983%" height="15" fill="rgb(224,95,51)" fg:x="10187" fg:w="52"/><text x="97.8640%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.05%)</title><rect x="98.0644%" y="165" width="0.0479%" height="15" fill="rgb(212,188,45)" fg:x="10234" fg:w="5"/><text x="98.3144%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.05%)</title><rect x="98.0644%" y="149" width="0.0479%" height="15" fill="rgb(223,154,38)" fg:x="10234" fg:w="5"/><text x="98.3144%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="98.0644%" y="133" width="0.0479%" height="15" fill="rgb(251,22,52)" fg:x="10234" fg:w="5"/><text x="98.3144%" y="143.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="98.1123%" y="245" width="0.0192%" height="15" fill="rgb(229,209,22)" fg:x="10239" fg:w="2"/><text x="98.3623%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (81 samples, 0.78%)</title><rect x="97.3649%" y="261" width="0.7762%" height="15" fill="rgb(234,138,34)" fg:x="10161" fg:w="81"/><text x="97.6149%" y="271.50"></text></g><g><title>__GI___libc_free (32 samples, 0.31%)</title><rect x="98.1411%" y="261" width="0.3066%" height="15" fill="rgb(212,95,11)" fg:x="10242" fg:w="32"/><text x="98.3911%" y="271.50"></text></g><g><title>_int_free (21 samples, 0.20%)</title><rect x="98.2465%" y="245" width="0.2012%" height="15" fill="rgb(240,179,47)" fg:x="10253" fg:w="21"/><text x="98.4965%" y="255.50"></text></g><g><title>__memcmp_avx2_movbe (18 samples, 0.17%)</title><rect x="98.4573%" y="261" width="0.1725%" height="15" fill="rgb(240,163,11)" fg:x="10275" fg:w="18"/><text x="98.7073%" y="271.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="98.6297%" y="261" width="0.0192%" height="15" fill="rgb(236,37,12)" fg:x="10293" fg:w="2"/><text x="98.8797%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="98.6297%" y="245" width="0.0192%" height="15" fill="rgb(232,164,16)" fg:x="10293" fg:w="2"/><text x="98.8797%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="98.7351%" y="197" width="0.0192%" height="15" fill="rgb(244,205,15)" fg:x="10304" fg:w="2"/><text x="98.9851%" y="207.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.14%)</title><rect x="98.6777%" y="229" width="0.1437%" height="15" fill="rgb(223,117,47)" fg:x="10298" fg:w="15"/><text x="98.9277%" y="239.50"></text></g><g><title>_int_realloc (13 samples, 0.12%)</title><rect x="98.6968%" y="213" width="0.1246%" height="15" fill="rgb(244,107,35)" fg:x="10300" fg:w="13"/><text x="98.9468%" y="223.50"></text></g><g><title>_int_malloc (6 samples, 0.06%)</title><rect x="98.7639%" y="197" width="0.0575%" height="15" fill="rgb(205,140,8)" fg:x="10307" fg:w="6"/><text x="99.0139%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.17%)</title><rect x="98.6585%" y="261" width="0.1725%" height="15" fill="rgb(228,84,46)" fg:x="10296" fg:w="18"/><text x="98.9085%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.17%)</title><rect x="98.6585%" y="245" width="0.1725%" height="15" fill="rgb(254,188,9)" fg:x="10296" fg:w="18"/><text x="98.9085%" y="255.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.02%)</title><rect x="98.8406%" y="245" width="0.0192%" height="15" fill="rgb(206,112,54)" fg:x="10315" fg:w="2"/><text x="99.0906%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="98.8406%" y="229" width="0.0192%" height="15" fill="rgb(216,84,49)" fg:x="10315" fg:w="2"/><text x="99.0906%" y="239.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="98.8406%" y="213" width="0.0192%" height="15" fill="rgb(214,194,35)" fg:x="10315" fg:w="2"/><text x="99.0906%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (7 samples, 0.07%)</title><rect x="98.8310%" y="261" width="0.0671%" height="15" fill="rgb(249,28,3)" fg:x="10314" fg:w="7"/><text x="99.0810%" y="271.50"></text></g><g><title>alloc::string::String::with_capacity (4 samples, 0.04%)</title><rect x="98.8597%" y="245" width="0.0383%" height="15" fill="rgb(222,56,52)" fg:x="10317" fg:w="4"/><text x="99.1097%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.03%)</title><rect x="98.8693%" y="229" width="0.0287%" height="15" fill="rgb(245,217,50)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="98.8693%" y="213" width="0.0287%" height="15" fill="rgb(213,201,24)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="98.8693%" y="197" width="0.0287%" height="15" fill="rgb(248,116,28)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="98.8693%" y="181" width="0.0287%" height="15" fill="rgb(219,72,43)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="98.8693%" y="165" width="0.0287%" height="15" fill="rgb(209,138,14)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="98.8693%" y="149" width="0.0287%" height="15" fill="rgb(222,18,33)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="159.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="98.8693%" y="133" width="0.0287%" height="15" fill="rgb(213,199,7)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="143.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="98.8693%" y="117" width="0.0287%" height="15" fill="rgb(250,110,10)" fg:x="10318" fg:w="3"/><text x="99.1193%" y="127.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.11%)</title><rect x="99.0418%" y="53" width="0.1054%" height="15" fill="rgb(248,123,6)" fg:x="10336" fg:w="11"/><text x="99.2918%" y="63.50"></text></g><g><title>_int_malloc (10 samples, 0.10%)</title><rect x="99.0514%" y="37" width="0.0958%" height="15" fill="rgb(206,91,31)" fg:x="10337" fg:w="10"/><text x="99.3014%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.14%)</title><rect x="99.0226%" y="149" width="0.1437%" height="15" fill="rgb(211,154,13)" fg:x="10334" fg:w="15"/><text x="99.2726%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.14%)</title><rect x="99.0226%" y="133" width="0.1437%" height="15" fill="rgb(225,148,7)" fg:x="10334" fg:w="15"/><text x="99.2726%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.14%)</title><rect x="99.0226%" y="117" width="0.1437%" height="15" fill="rgb(220,160,43)" fg:x="10334" fg:w="15"/><text x="99.2726%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.14%)</title><rect x="99.0226%" y="101" width="0.1437%" height="15" fill="rgb(213,52,39)" fg:x="10334" fg:w="15"/><text x="99.2726%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.14%)</title><rect x="99.0226%" y="85" width="0.1437%" height="15" fill="rgb(243,137,7)" fg:x="10334" fg:w="15"/><text x="99.2726%" y="95.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.14%)</title><rect x="99.0226%" y="69" width="0.1437%" height="15" fill="rgb(230,79,13)" fg:x="10334" fg:w="15"/><text x="99.2726%" y="79.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="99.1472%" y="53" width="0.0192%" height="15" fill="rgb(247,105,23)" fg:x="10347" fg:w="2"/><text x="99.3972%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="99.1472%" y="37" width="0.0192%" height="15" fill="rgb(223,179,41)" fg:x="10347" fg:w="2"/><text x="99.3972%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.25%)</title><rect x="98.9460%" y="245" width="0.2491%" height="15" fill="rgb(218,9,34)" fg:x="10326" fg:w="26"/><text x="99.1960%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.17%)</title><rect x="99.0226%" y="229" width="0.1725%" height="15" fill="rgb(222,106,8)" fg:x="10334" fg:w="18"/><text x="99.2726%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.17%)</title><rect x="99.0226%" y="213" width="0.1725%" height="15" fill="rgb(211,220,0)" fg:x="10334" fg:w="18"/><text x="99.2726%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.17%)</title><rect x="99.0226%" y="197" width="0.1725%" height="15" fill="rgb(229,52,16)" fg:x="10334" fg:w="18"/><text x="99.2726%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.17%)</title><rect x="99.0226%" y="181" width="0.1725%" height="15" fill="rgb(212,155,18)" fg:x="10334" fg:w="18"/><text x="99.2726%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.17%)</title><rect x="99.0226%" y="165" width="0.1725%" height="15" fill="rgb(242,21,14)" fg:x="10334" fg:w="18"/><text x="99.2726%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="99.1663%" y="149" width="0.0287%" height="15" fill="rgb(222,19,48)" fg:x="10349" fg:w="3"/><text x="99.4163%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="99.1663%" y="133" width="0.0287%" height="15" fill="rgb(232,45,27)" fg:x="10349" fg:w="3"/><text x="99.4163%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="99.1759%" y="117" width="0.0192%" height="15" fill="rgb(249,103,42)" fg:x="10350" fg:w="2"/><text x="99.4259%" y="127.50"></text></g><g><title>__GI___libc_free (18 samples, 0.17%)</title><rect x="99.1951%" y="245" width="0.1725%" height="15" fill="rgb(246,81,33)" fg:x="10352" fg:w="18"/><text x="99.4451%" y="255.50"></text></g><g><title>_int_free (10 samples, 0.10%)</title><rect x="99.2718%" y="229" width="0.0958%" height="15" fill="rgb(252,33,42)" fg:x="10360" fg:w="10"/><text x="99.5218%" y="239.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="99.3772%" y="245" width="0.0192%" height="15" fill="rgb(209,212,41)" fg:x="10371" fg:w="2"/><text x="99.6272%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="99.3772%" y="229" width="0.0192%" height="15" fill="rgb(207,154,6)" fg:x="10371" fg:w="2"/><text x="99.6272%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.08%)</title><rect x="99.4059%" y="245" width="0.0767%" height="15" fill="rgb(223,64,47)" fg:x="10374" fg:w="8"/><text x="99.6559%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.08%)</title><rect x="99.4059%" y="229" width="0.0767%" height="15" fill="rgb(211,161,38)" fg:x="10374" fg:w="8"/><text x="99.6559%" y="239.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.07%)</title><rect x="99.4155%" y="213" width="0.0671%" height="15" fill="rgb(219,138,40)" fg:x="10375" fg:w="7"/><text x="99.6655%" y="223.50"></text></g><g><title>_int_realloc (6 samples, 0.06%)</title><rect x="99.4251%" y="197" width="0.0575%" height="15" fill="rgb(241,228,46)" fg:x="10376" fg:w="6"/><text x="99.6751%" y="207.50"></text></g><g><title>_int_malloc (5 samples, 0.05%)</title><rect x="99.4346%" y="181" width="0.0479%" height="15" fill="rgb(223,209,38)" fg:x="10377" fg:w="5"/><text x="99.6846%" y="191.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.03%)</title><rect x="99.4921%" y="229" width="0.0287%" height="15" fill="rgb(236,164,45)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.03%)</title><rect x="99.4921%" y="213" width="0.0287%" height="15" fill="rgb(231,15,5)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="99.4921%" y="197" width="0.0287%" height="15" fill="rgb(252,35,15)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="99.4921%" y="181" width="0.0287%" height="15" fill="rgb(248,181,18)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="99.4921%" y="165" width="0.0287%" height="15" fill="rgb(233,39,42)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="99.4921%" y="149" width="0.0287%" height="15" fill="rgb(238,110,33)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="99.4921%" y="133" width="0.0287%" height="15" fill="rgb(233,195,10)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="143.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="99.4921%" y="117" width="0.0287%" height="15" fill="rgb(254,105,3)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="127.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="99.4921%" y="101" width="0.0287%" height="15" fill="rgb(221,225,9)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="111.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="99.4921%" y="85" width="0.0287%" height="15" fill="rgb(224,227,45)" fg:x="10383" fg:w="3"/><text x="99.7421%" y="95.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (6 samples, 0.06%)</title><rect x="99.4826%" y="245" width="0.0575%" height="15" fill="rgb(229,198,43)" fg:x="10382" fg:w="6"/><text x="99.7326%" y="255.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (2 samples, 0.02%)</title><rect x="99.5209%" y="229" width="0.0192%" height="15" fill="rgb(206,209,35)" fg:x="10386" fg:w="2"/><text x="99.7709%" y="239.50"></text></g><g><title>day12::travel2 (68 samples, 0.65%)</title><rect x="98.8980%" y="261" width="0.6516%" height="15" fill="rgb(245,195,53)" fg:x="10321" fg:w="68"/><text x="99.1480%" y="271.50"></text></g><g><title>day12::travel2 (623 samples, 5.97%)</title><rect x="93.5991%" y="293" width="5.9697%" height="15" fill="rgb(240,92,26)" fg:x="9768" fg:w="623"/><text x="93.8491%" y="303.50">day12::t..</text></g><g><title>day12::travel2 (263 samples, 2.52%)</title><rect x="97.0487%" y="277" width="2.5201%" height="15" fill="rgb(207,40,23)" fg:x="10128" fg:w="263"/><text x="97.2987%" y="287.50">da..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="99.5496%" y="261" width="0.0192%" height="15" fill="rgb(223,111,35)" fg:x="10389" fg:w="2"/><text x="99.7996%" y="271.50"></text></g><g><title>day12::travel2 (977 samples, 9.36%)</title><rect x="90.2261%" y="309" width="9.3618%" height="15" fill="rgb(229,147,28)" fg:x="9416" fg:w="977"/><text x="90.4761%" y="319.50">day12::travel2</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="99.5688%" y="293" width="0.0192%" height="15" fill="rgb(211,29,28)" fg:x="10391" fg:w="2"/><text x="99.8188%" y="303.50"></text></g><g><title>day12::travel2 (1,203 samples, 11.53%)</title><rect x="88.0701%" y="325" width="11.5274%" height="15" fill="rgb(228,72,33)" fg:x="9191" fg:w="1203"/><text x="88.3201%" y="335.50">day12::travel2</text></g><g><title>day12::travel2 (1,464 samples, 14.03%)</title><rect x="85.5788%" y="357" width="14.0284%" height="15" fill="rgb(205,214,31)" fg:x="8931" fg:w="1464"/><text x="85.8288%" y="367.50">day12::travel2</text></g><g><title>day12::travel2 (1,362 samples, 13.05%)</title><rect x="86.5562%" y="341" width="13.0510%" height="15" fill="rgb(224,111,15)" fg:x="9033" fg:w="1362"/><text x="86.8062%" y="351.50">day12::travel2</text></g><g><title>day12::travel2 (1,511 samples, 14.48%)</title><rect x="85.1380%" y="373" width="14.4787%" height="15" fill="rgb(253,21,26)" fg:x="8885" fg:w="1511"/><text x="85.3880%" y="383.50">day12::travel2</text></g><g><title>day12::travel2 (1,583 samples, 15.17%)</title><rect x="84.4576%" y="469" width="15.1686%" height="15" fill="rgb(245,139,43)" fg:x="8814" fg:w="1583"/><text x="84.7076%" y="479.50">day12::travel2</text></g><g><title>day12::travel2 (1,576 samples, 15.10%)</title><rect x="84.5247%" y="453" width="15.1016%" height="15" fill="rgb(252,170,7)" fg:x="8821" fg:w="1576"/><text x="84.7747%" y="463.50">day12::travel2</text></g><g><title>day12::travel2 (1,573 samples, 15.07%)</title><rect x="84.5535%" y="437" width="15.0728%" height="15" fill="rgb(231,118,14)" fg:x="8824" fg:w="1573"/><text x="84.8035%" y="447.50">day12::travel2</text></g><g><title>day12::travel2 (1,568 samples, 15.02%)</title><rect x="84.6014%" y="421" width="15.0249%" height="15" fill="rgb(238,83,0)" fg:x="8829" fg:w="1568"/><text x="84.8514%" y="431.50">day12::travel2</text></g><g><title>day12::travel2 (1,563 samples, 14.98%)</title><rect x="84.6493%" y="405" width="14.9770%" height="15" fill="rgb(221,39,39)" fg:x="8834" fg:w="1563"/><text x="84.8993%" y="415.50">day12::travel2</text></g><g><title>day12::travel2 (1,546 samples, 14.81%)</title><rect x="84.8122%" y="389" width="14.8141%" height="15" fill="rgb(222,119,46)" fg:x="8851" fg:w="1546"/><text x="85.0622%" y="399.50">day12::travel2</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="99.6359%" y="357" width="0.0192%" height="15" fill="rgb(222,165,49)" fg:x="10398" fg:w="2"/><text x="99.8859%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.02%)</title><rect x="99.7413%" y="341" width="0.0192%" height="15" fill="rgb(219,113,52)" fg:x="10409" fg:w="2"/><text x="99.9913%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="99.7604%" y="133" width="0.0192%" height="15" fill="rgb(214,7,15)" fg:x="10411" fg:w="2"/><text x="100.0104%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="99.7604%" y="309" width="0.0287%" height="15" fill="rgb(235,32,4)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="99.7604%" y="293" width="0.0287%" height="15" fill="rgb(238,90,54)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="99.7604%" y="277" width="0.0287%" height="15" fill="rgb(213,208,19)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="99.7604%" y="261" width="0.0287%" height="15" fill="rgb(233,156,4)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="99.7604%" y="245" width="0.0287%" height="15" fill="rgb(207,194,5)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="99.7604%" y="229" width="0.0287%" height="15" fill="rgb(206,111,30)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="99.7604%" y="213" width="0.0287%" height="15" fill="rgb(243,70,54)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="99.7604%" y="197" width="0.0287%" height="15" fill="rgb(242,28,8)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="99.7604%" y="181" width="0.0287%" height="15" fill="rgb(219,106,18)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="99.7604%" y="165" width="0.0287%" height="15" fill="rgb(244,222,10)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="175.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="99.7604%" y="149" width="0.0287%" height="15" fill="rgb(236,179,52)" fg:x="10411" fg:w="3"/><text x="100.0104%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="99.7604%" y="325" width="0.0383%" height="15" fill="rgb(213,23,39)" fg:x="10411" fg:w="4"/><text x="100.0104%" y="335.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="99.7988%" y="325" width="0.0287%" height="15" fill="rgb(238,48,10)" fg:x="10415" fg:w="3"/><text x="100.0488%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="99.8084%" y="309" width="0.0192%" height="15" fill="rgb(251,196,23)" fg:x="10416" fg:w="2"/><text x="100.0584%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="99.8754%" y="309" width="0.0287%" height="15" fill="rgb(250,152,24)" fg:x="10423" fg:w="3"/><text x="100.1254%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="99.8850%" y="293" width="0.0192%" height="15" fill="rgb(209,150,17)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="99.8850%" y="277" width="0.0192%" height="15" fill="rgb(234,202,34)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="99.8850%" y="261" width="0.0192%" height="15" fill="rgb(253,148,53)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="99.8850%" y="245" width="0.0192%" height="15" fill="rgb(218,129,16)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="99.8850%" y="229" width="0.0192%" height="15" fill="rgb(216,85,19)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="99.8850%" y="213" width="0.0192%" height="15" fill="rgb(235,228,7)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="99.8850%" y="197" width="0.0192%" height="15" fill="rgb(245,175,0)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="99.8850%" y="181" width="0.0192%" height="15" fill="rgb(208,168,36)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="99.8850%" y="165" width="0.0192%" height="15" fill="rgb(246,171,24)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="99.8850%" y="149" width="0.0192%" height="15" fill="rgb(215,142,24)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="99.8850%" y="133" width="0.0192%" height="15" fill="rgb(250,187,7)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="143.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="99.8850%" y="117" width="0.0192%" height="15" fill="rgb(228,66,33)" fg:x="10424" fg:w="2"/><text x="100.1350%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="99.9329%" y="293" width="0.0192%" height="15" fill="rgb(234,215,21)" fg:x="10429" fg:w="2"/><text x="100.1829%" y="303.50"></text></g><g><title>std::panic::catch_unwind (9,930 samples, 95.15%)</title><rect x="4.8103%" y="581" width="95.1514%" height="15" fill="rgb(222,191,20)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,930 samples, 95.15%)</title><rect x="4.8103%" y="565" width="95.1514%" height="15" fill="rgb(245,79,54)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,930 samples, 95.15%)</title><rect x="4.8103%" y="549" width="95.1514%" height="15" fill="rgb(240,10,37)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,930 samples, 95.15%)</title><rect x="4.8103%" y="533" width="95.1514%" height="15" fill="rgb(214,192,32)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (9,930 samples, 95.15%)</title><rect x="4.8103%" y="517" width="95.1514%" height="15" fill="rgb(209,36,54)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="527.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,930 samples, 95.15%)</title><rect x="4.8103%" y="501" width="95.1514%" height="15" fill="rgb(220,10,11)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>day12::main (9,930 samples, 95.15%)</title><rect x="4.8103%" y="485" width="95.1514%" height="15" fill="rgb(221,106,17)" fg:x="502" fg:w="9930"/><text x="5.0603%" y="495.50">day12::main</text></g><g><title>day12::travel (35 samples, 0.34%)</title><rect x="99.6263%" y="469" width="0.3354%" height="15" fill="rgb(251,142,44)" fg:x="10397" fg:w="35"/><text x="99.8763%" y="479.50"></text></g><g><title>day12::travel (35 samples, 0.34%)</title><rect x="99.6263%" y="453" width="0.3354%" height="15" fill="rgb(238,13,15)" fg:x="10397" fg:w="35"/><text x="99.8763%" y="463.50"></text></g><g><title>day12::travel (35 samples, 0.34%)</title><rect x="99.6263%" y="437" width="0.3354%" height="15" fill="rgb(208,107,27)" fg:x="10397" fg:w="35"/><text x="99.8763%" y="447.50"></text></g><g><title>day12::travel (35 samples, 0.34%)</title><rect x="99.6263%" y="421" width="0.3354%" height="15" fill="rgb(205,136,37)" fg:x="10397" fg:w="35"/><text x="99.8763%" y="431.50"></text></g><g><title>day12::travel (34 samples, 0.33%)</title><rect x="99.6359%" y="405" width="0.3258%" height="15" fill="rgb(250,205,27)" fg:x="10398" fg:w="34"/><text x="99.8859%" y="415.50"></text></g><g><title>day12::travel (34 samples, 0.33%)</title><rect x="99.6359%" y="389" width="0.3258%" height="15" fill="rgb(210,80,43)" fg:x="10398" fg:w="34"/><text x="99.8859%" y="399.50"></text></g><g><title>day12::travel (34 samples, 0.33%)</title><rect x="99.6359%" y="373" width="0.3258%" height="15" fill="rgb(247,160,36)" fg:x="10398" fg:w="34"/><text x="99.8859%" y="383.50"></text></g><g><title>day12::travel (30 samples, 0.29%)</title><rect x="99.6742%" y="357" width="0.2875%" height="15" fill="rgb(234,13,49)" fg:x="10402" fg:w="30"/><text x="99.9242%" y="367.50"></text></g><g><title>day12::travel (21 samples, 0.20%)</title><rect x="99.7604%" y="341" width="0.2012%" height="15" fill="rgb(234,122,0)" fg:x="10411" fg:w="21"/><text x="100.0104%" y="351.50"></text></g><g><title>day12::travel (10 samples, 0.10%)</title><rect x="99.8658%" y="325" width="0.0958%" height="15" fill="rgb(207,146,38)" fg:x="10422" fg:w="10"/><text x="100.1158%" y="335.50"></text></g><g><title>day12::travel (3 samples, 0.03%)</title><rect x="99.9329%" y="309" width="0.0287%" height="15" fill="rgb(207,177,25)" fg:x="10429" fg:w="3"/><text x="100.1829%" y="319.50"></text></g><g><title>__libc_start_main (9,931 samples, 95.16%)</title><rect x="4.8103%" y="693" width="95.1610%" height="15" fill="rgb(211,178,42)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="703.50">__libc_start_main</text></g><g><title>main (9,931 samples, 95.16%)</title><rect x="4.8103%" y="677" width="95.1610%" height="15" fill="rgb(230,69,54)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (9,931 samples, 95.16%)</title><rect x="4.8103%" y="661" width="95.1610%" height="15" fill="rgb(214,135,41)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,931 samples, 95.16%)</title><rect x="4.8103%" y="645" width="95.1610%" height="15" fill="rgb(237,67,25)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,931 samples, 95.16%)</title><rect x="4.8103%" y="629" width="95.1610%" height="15" fill="rgb(222,189,50)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,931 samples, 95.16%)</title><rect x="4.8103%" y="613" width="95.1610%" height="15" fill="rgb(245,148,34)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (9,931 samples, 95.16%)</title><rect x="4.8103%" y="597" width="95.1610%" height="15" fill="rgb(222,29,6)" fg:x="502" fg:w="9931"/><text x="5.0603%" y="607.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>all (10,436 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(221,189,43)" fg:x="0" fg:w="10436"/><text x="0.2500%" y="751.50"></text></g><g><title>day12 (10,436 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(207,36,27)" fg:x="0" fg:w="10436"/><text x="0.2500%" y="735.50">day12</text></g><g><title>_start (9,940 samples, 95.25%)</title><rect x="4.7528%" y="709" width="95.2472%" height="15" fill="rgb(217,90,24)" fg:x="496" fg:w="9940"/><text x="5.0028%" y="719.50">_start</text></g><g><title>_dl_start (3 samples, 0.03%)</title><rect x="99.9713%" y="693" width="0.0287%" height="15" fill="rgb(224,66,35)" fg:x="10433" fg:w="3"/><text x="100.2213%" y="703.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.02%)</title><rect x="99.9808%" y="677" width="0.0192%" height="15" fill="rgb(221,13,50)" fg:x="10434" fg:w="2"/><text x="100.2308%" y="687.50"></text></g><g><title>dl_main (2 samples, 0.02%)</title><rect x="99.9808%" y="661" width="0.0192%" height="15" fill="rgb(236,68,49)" fg:x="10434" fg:w="2"/><text x="100.2308%" y="671.50"></text></g></svg></svg>